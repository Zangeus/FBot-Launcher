package Utils;

import Waiters.TelegramBotSender;
import java.util.EnumMap;
import java.util.concurrent.CompletableFuture;

import static Waiters.TelegramBotSender.sendText;

public class CommandListener {

    public enum Command {RESTART, RESTART_FROM_START, STOP, NONE}

    private static final EnumMap<Command, Boolean> commands = new EnumMap<>(Command.class);

    // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
    private static volatile boolean commandReceived = false;

    static {
        for (Command cmd : Command.values()) {
            commands.put(cmd, false);
        }
    }

    public static synchronized void handleCommand(String input) {
        if (input == null || input.isBlank()) return;
        String cmd = input.toLowerCase();

        switch (cmd) {
            case "/restart":
                commands.put(Command.RESTART, true);
                sendText("- Nice - –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑");

                // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ restart
                CompletableFuture.runAsync(() -> {
                    try {
                        Thread.sleep(300); // –í—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                        triggerCommandProcessing(Command.RESTART);
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                    }
                });
                break;

            case "/restart_0":
                commands.put(Command.RESTART_FROM_START, true);
                sendText("- Nice - –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞");

                // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ restart_0
                CompletableFuture.runAsync(() -> {
                    try {
                        Thread.sleep(300);
                        triggerCommandProcessing(Command.RESTART_FROM_START);
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                    }
                });
                break;

            case "/stop":
                commands.put(Command.STOP, true);
                sendText("- Got it - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞");

                // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ stop
                CompletableFuture.runAsync(() -> {
                    try {
                        Thread.sleep(300);
                        triggerCommandProcessing(Command.STOP);
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                    }
                });
                break;

            case "/status":
                // Status –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
                CompletableFuture.runAsync(() -> {
                    try {
                        Utils.Notifier.sendReport();
                    } catch (Exception e) {
                        sendText("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: " + e.getMessage());
                    }
                });
                break;

            default:
                TelegramBotSender.sendText("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + input);
                break;
        }

        // –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—É, —á—Ç–æ –ø—Ä–∏—à–ª–∞ –∫–æ–º–∞–Ω–¥–∞
        commandReceived = true;
    }

    private static void triggerCommandProcessing(Command command) {
        System.out.println("üöÄ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: " + command);

        try {
            switch (command) {
                case RESTART:
                    System.out.println("‚ôª –í—ã–ø–æ–ª–Ω—è–µ–º restart...");
                    // –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å restart –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ —á–µ—Ä–µ–∑ Main
                    notifyMainLoop();
                    break;

                case RESTART_FROM_START:
                    System.out.println("‚ôª –í—ã–ø–æ–ª–Ω—è–µ–º restart from start...");
                    notifyMainLoop();
                    break;

                case STOP:
                    System.out.println("üõë –í—ã–ø–æ–ª–Ω—è–µ–º stop...");
                    Waiters.Main.stopProgram();
                    break;
            }
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã " + command + ": " + e.getMessage());
        }
    }

    private static void notifyMainLoop() {
        // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–Ω –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        commandReceived = true;
    }

    public static synchronized boolean isCommandRequested(Command command) {
        boolean result = commands.getOrDefault(command, false);
        commands.put(command, false); // —Å–±—Ä–æ—Å –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        return result;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –±—ã–ª–∞ –ª–∏ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ (–¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Å–Ω–∞)
    public static boolean wasCommandReceived() {
        boolean result = commandReceived;
        commandReceived = false;
        return result;
    }

    // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –∫–æ–º–∞–Ω–¥—ã
    public static void resetCommandFlag() {
        commandReceived = false;
    }
}